document.addEventListener('DOMContentLoaded', function(event) {
  var app = new Vue({

    el: '#weather',
    data: {
      celsius: false,
      currentCity: 'Chicago',
      errors: [],
      key: '',
      lastSearch: 0,
      loading: false,
      zipcode: '',


      weatherReport: []

    },

    methods: {

      isNumber: function(event) {
        this.errors = [];

        if (this.zipcode.length < 5) {
          if (window.event.key.match(/[A-Za-z;:'",<.>//\[\]\{\}?!@#$%^&*\(\-_=+\`\\\|~)" "]/)) {
            this.errors.push('You may only input numbers.')
            event.preventDefault();;
          };
        };

      },

      tooFast: function(now) {
        if (this.lastSearch + 2000 > now) {
          this.errors = ['You\'re requesting too often! Wait at least 2 seconds'];
        } else {
          this.errors = [];

          this.getKey();
        };
      },

      tooLong: function() {
        this.loading = false;
        this.key = '';
        this.errors.push('Your request timed out. Please try again.');
        // The below code does nothing. It only causes JS to stop.
        asdf;
      },

      getKey: function() {
        // This function is essentially hiding the real key. If quickly
        // finds the key before moving on.
        var string = '735b698a77db71ae';
        var key_string = '';

        for (var i = 0; i < string.split('').length; i++) {
          if (string.split('')[i].match(/[A-Za-z]/)) {
            if (string.split('')[i] === 'a') {
              key_string += 'a';
            } else {
              var c = string.split('')[i].charCodeAt(0) + 1;
              key_string += String.fromCharCode(c);
            };
          } else {
            key_string += (string.split('')[i] - 1)
          };
        }
        this.key = key_string;
        this.searchZipcode();
        this.findCity;
      },

      searchZipcode: function() {
        this.errors = ['Zipcode cannot be blank.', 'Zipcode must be 5 numbers. IE: 60622' ];

        if (this.zipcode != '') {
          this.loading = true;
          this.weatherReport = [];
          this.errors = [];
          this.lastSearch = Date.now();

          if (this.fetch(this.zipcode)) {
            var weatherInfo = this.fetch(this.zipcode);

            for (var i = 0; i < 3; i++) {
              this.weatherReport.push(weatherInfo[i]);
            };

            this.zipcode = '';
            this.loading = false;
            this.key = '';
          } else {

            var timer = setTimeout(this.tooLong, 5000);

            $.get('http://api.wunderground.com/api/' + this.key + '/forecast/q/' + this.zipcode +'.json', function(list) {

              if (list['forecast']) {
                for (var i = 0; i < 3; i++) {
                  this.weatherReport.push(list['forecast']['simpleforecast']['forecastday'][i]);
                  this.findCity();
                  clearTimeout(timer);
                };
              } else if (list['response']) {
                this.errors = [list['response']['error']['description']];
                this.loading = false;
                this.key = '';
                this.zipcode = '';
                clearTimeout(timer);
              };

            }.bind(this));
          };
        };
      },

      findCity: function() {
        $.get('http://api.wunderground.com/api/' + this.key + '/conditions/q/' + this.zipcode +'.json', function(info) {

          if (info['current_observation']) {
            this.currentCity = info['current_observation']['display_location']['full'];
            this.store(this.zipcode, this.weatherReport, this.currentCity);
          } else {
            this.errors.push('There was an issue retrieving the city name. Please try again');
          }
        }.bind(this));
      },

      store: function(zipcode, weather, city) {

        object = {
          timestamp: Date.now(),
          city: city,
          weather: weather,
        };

        localStorage[zipcode] = JSON.stringify(object);
        this.loading = false;
        this.key = '';
        this.zipcode = '';
      },

      fetch: function(zipcode) {
        var object = localStorage[zipcode];


        if(object) {
          if (JSON.parse(object).timestamp + 3600000 > Date.now()) {
            this.currentCity = JSON.parse(object).city;
            // this.weatherReport = [];
            return JSON.parse(object).weather;
          } else {
            localStorage.removeItem(zipcode);
            return null;
          };
        } else {
          return null;
        };
      }
    },
  });
})